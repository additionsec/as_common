/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.4 at Wed Aug 23 15:25:39 2017. */

#ifndef PB_ADDSEC_CTI_PB_H_INCLUDED
#define PB_ADDSEC_CTI_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ObservationData_DataType {
    ObservationData_DataType_DataTypeUnknown = 0,
    ObservationData_DataType_DataTypeHashMD5 = 1,
    ObservationData_DataType_DataTypeHashSHA1 = 2,
    ObservationData_DataType_DataTypeHashSHA256 = 3,
    ObservationData_DataType_DataTypeHashAS1 = 4,
    ObservationData_DataType_DataTypeHashAS2 = 5,
    ObservationData_DataType_DataTypeCVE = 6,
    ObservationData_DataType_DataTypeVersionString = 7,
    ObservationData_DataType_DataTypeModelString = 8,
    ObservationData_DataType_DataTypeASLibVersion = 9,
    ObservationData_DataType_DataTypeFile = 10,
    ObservationData_DataType_DataTypeX509 = 11,
    ObservationData_DataType_DataTypeX509Subject = 12,
    ObservationData_DataType_DataTypeX509Issuer = 13,
    ObservationData_DataType_DataTypeUsername = 14,
    ObservationData_DataType_DataTypeProcess = 15,
    ObservationData_DataType_DataTypeCommand = 16,
    ObservationData_DataType_DataTypeApplication = 17,
    ObservationData_DataType_DataTypeString = 18,
    ObservationData_DataType_DataTypeNumber = 19,
    ObservationData_DataType_DataTypeIPv4 = 20,
    ObservationData_DataType_DataTypeIPv6 = 21,
    ObservationData_DataType_DataTypePort = 22,
    ObservationData_DataType_DataTypeHostname = 23,
    ObservationData_DataType_DataTypeMAC = 24,
    ObservationData_DataType_DataTypeASConfTimestamp = 25,
    ObservationData_DataType_DataTypeASDefVersion = 26,
    ObservationData_DataType_DataTypeHPKP = 27,
    ObservationData_DataType_DataTypeVendorRefID = 28,
    ObservationData_DataType_DataTypeEnvString = 29,
    ObservationData_DataType_DataTypeSymbolString = 30,
    ObservationData_DataType_DataTypePropertyName = 31,
    ObservationData_DataType_DataTypeLibrary = 32,
    ObservationData_DataType_DataTypeSSID = 33,
    ObservationData_DataType_DataTypeBSSID = 34,
    ObservationData_DataType_DataTypeSystemID = 35,
    ObservationData_DataType_DataTypeNativePointer = 36,
    ObservationData_DataType_DataTypeNativeInt = 37,
    ObservationData_DataType_DataTypeRawBinary = 38
} ObservationData_DataType;

typedef enum _Sighting_SightingType {
    Sighting_SightingType_SightingTypeUnknown = 0,
    Sighting_SightingType_SightingTypeInformational = 1,
    Sighting_SightingType_SightingTypeSystemCharacteristics = 2,
    Sighting_SightingType_SightingTypeApplicationCharacteristics = 3,
    Sighting_SightingType_SightingTypeMalwareArtifacts = 4,
    Sighting_SightingType_SightingTypeNetworkAttack = 5,
    Sighting_SightingType_SightingTypeUserBehavior = 6,
    Sighting_SightingType_SightingTypeCompliance = 7,
    Sighting_SightingType_SightingTypeCustomerData = 8
} Sighting_SightingType;

typedef enum _Sighting_SightingConfidence {
    Sighting_SightingConfidence_SightingConfidenceUnknown = 0,
    Sighting_SightingConfidence_SightingConfidenceLow = 1,
    Sighting_SightingConfidence_SightingConfidenceMedium = 2,
    Sighting_SightingConfidence_SightingConfidenceHigh = 3
} Sighting_SightingConfidence;

typedef enum _Report_SystemType {
    Report_SystemType_SystemTypeUnknown = 0,
    Report_SystemType_SystemTypeIOS = 1,
    Report_SystemType_SystemTypeAndroid = 2,
    Report_SystemType_SystemTypeWindowsMobile = 3,
    Report_SystemType_SystemTypeBlackberry = 4,
    Report_SystemType_SystemTypeAmazonMobile = 5,
    Report_SystemType_SystemTypeOSX = 6,
    Report_SystemType_SystemTypeLinux = 7,
    Report_SystemType_SystemTypeWindows = 8,
    Report_SystemType_SystemTypeBSD = 9,
    Report_SystemType_SystemTypeEmbeddedLinux = 10,
    Report_SystemType_SystemTypeIOT = 11,
    Report_SystemType_SystemTypeNetworkDevice = 12
} Report_SystemType;

/* Struct definitions */
typedef struct _ObservationData {
    bool has_dataType;
    uint32_t dataType;
    pb_callback_t data;
    bool has_num;
    uint32_t num;
} ObservationData;

typedef PB_BYTES_ARRAY_T(32) Report_organizationId_t;
typedef PB_BYTES_ARRAY_T(32) Report_systemId_t;
typedef PB_BYTES_ARRAY_T(128) Report_applicationId_t;
typedef PB_BYTES_ARRAY_T(32) Report_userId_t;
typedef struct _Report {
    bool has_organizationId;
    Report_organizationId_t organizationId;
    bool has_systemId;
    Report_systemId_t systemId;
    pb_callback_t systemIdSecondary;
    bool has_systemType;
    uint32_t systemType;
    bool has_applicationId;
    Report_applicationId_t applicationId;
    bool has_userId;
    Report_userId_t userId;
    pb_callback_t userIdSecondary;
    pb_callback_t sightings;
    bool has_timeBase;
    uint32_t timeBase;
    pb_callback_t version;
} Report;

typedef struct _Sighting {
    bool has_sightingType;
    uint32_t sightingType;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_confidence;
    uint32_t confidence;
    pb_callback_t datas;
    bool has_testId;
    uint32_t testId;
    bool has_testSubId;
    uint32_t testSubId;
    bool has_timeDelta;
    uint32_t timeDelta;
} Sighting;

/* Default values for struct fields */
extern const uint32_t ObservationData_dataType_default;
extern const uint32_t Sighting_sightingType_default;
extern const uint32_t Sighting_confidence_default;
extern const uint32_t Report_systemType_default;

/* Initializer values for message structs */
#define ObservationData_init_default             {false, 0u, {{NULL}, NULL}, false, 0}
#define Sighting_init_default                    {false, 0u, false, 0, false, 0u, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define Report_init_default                      {false, {0, {0}}, false, {0, {0}}, {{NULL}, NULL}, false, 0u, false, {0, {0}}, false, {0, {0}}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define ObservationData_init_zero                {false, 0, {{NULL}, NULL}, false, 0}
#define Sighting_init_zero                       {false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define Report_init_zero                         {false, {0, {0}}, false, {0, {0}}, {{NULL}, NULL}, false, 0, false, {0, {0}}, false, {0, {0}}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define ObservationData_dataType_tag             1
#define ObservationData_data_tag                 2
#define ObservationData_num_tag                  3
#define Report_organizationId_tag                1
#define Report_systemId_tag                      2
#define Report_systemIdSecondary_tag             3
#define Report_systemType_tag                    4
#define Report_applicationId_tag                 5
#define Report_userId_tag                        6
#define Report_userIdSecondary_tag               7
#define Report_sightings_tag                     8
#define Report_timeBase_tag                      9
#define Report_version_tag                       10
#define Sighting_sightingType_tag                1
#define Sighting_timestamp_tag                   2
#define Sighting_timeDelta_tag                   8
#define Sighting_confidence_tag                  3
#define Sighting_datas_tag                       5
#define Sighting_testId_tag                      6
#define Sighting_testSubId_tag                   7

/* Struct field encoding specification for nanopb */
extern const pb_field_t ObservationData_fields[4];
extern const pb_field_t Sighting_fields[8];
extern const pb_field_t Report_fields[11];

/* Maximum encoded size of messages (where known) */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ADDSEC_CTI_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
